# Data Flow Diagram

## ASCII Flow Diagram

```
┌─────────────────────────────────────────────────────────────────────────┐
│                        DATA FLOW - TRADING PIPELINE                      │
└─────────────────────────────────────────────────────────────────────────┘

Step 1: INGESTION
═══════════════════
   Finnhub WebSocket
         │
         │ {"type":"trade", "data":[{...}]}
         ▼
   ┌─────────────┐
   │  Validator  │ ✓ Check: s, p, t, v present
   └──────┬──────┘ ✓ Validate: price > 0, volume > 0
          │        ✓ Enrich: add processed_at
          ▼
   {"symbol": "AAPL", "price": 150.25, ...}


Step 2: QUEUEING
════════════════
   ┌──────────────┐
   │ Kafka Topic  │
   │ Partition 0  │ ← AAPL trades
   │ Partition 1  │ ← GOOGL trades
   │ Partition 2  │ ← MSFT trades
   └──────┬───────┘
          │
          │ Consumer Group: spark-streaming
          │ Offset tracking ✓


Step 3: PROCESSING
══════════════════
   ┌────────────────────┐
   │  Spark Streaming   │
   │  Micro-batch: 5s   │
   └──────┬───────┬─────┘
          │       │
          │       └─────────────────┐
          │                         │
          ▼                         ▼
   ┌──────────────┐        ┌─────────────────┐
   │ Raw Trades   │        │  Aggregation    │
   │ Processing   │        │  (1-min Window) │
   └──────┬───────┘        └────────┬────────┘
          │                         │
          │ Add Partitions          │ Calculate OHLCV
          │ • trade_year            │ • Open: first
          │ • trade_month           │ • High: max
          │ • trade_day             │ • Low: min
          │ • trade_hour            │ • Close: last
          │                         │ • Volume: sum
          ▼                         ▼


Step 4: STORAGE
═══════════════
   ┌─────────────────────┐      ┌──────────────────────┐
   │    trades_v2        │      │  trade_aggregates    │
   ├─────────────────────┤      ├──────────────────────┤
   │ PK: (symbol,        │      │ PK: (symbol,         │
   │      year, month,   │      │      year, month)    │
   │      day)           │      │ CK: window_start     │
   │ CK: timestamp DESC  │      │                      │
   │ TTL: 30 days        │      │ TTL: 90 days         │
   └─────────────────────┘      └──────────────────────┘


Step 5: QUERY & VISUALIZATION
══════════════════════════════
   ┌──────────────────────────────┐
   │  Grafana Dashboards          │
   │  ┌────────────────────────┐  │
   │  │  Real-time Price Chart │  │
   │  │  📈                    │  │
   │  └────────────────────────┘  │
   │  ┌────────────────────────┐  │
   │  │  Volume Bar Chart      │  │
   │  │  📊                    │  │
   │  └────────────────────────┘  │
   └──────────────────────────────┘


MONITORING FLOW
═══════════════

   Producer ──┐
              │
   Kafka   ───┼──► Prometheus ──► Alertmanager ──► Slack
              │      • Scrape       • Evaluate      • Notify
   Spark   ───┤      • Store        • Route         • Alert
              │      • Query        • Dedupe
   Cassandra ┘


LATENCY BREAKDOWN (P95)
═══════════════════════
Producer → Kafka:     10ms  ████
Kafka → Spark:       100ms  ██████████
Spark Processing:   2000ms  ████████████████████████████████
Spark → Cassandra:   500ms  ████████████
─────────────────────────────────────────
Total E2E:         ~2610ms  ████████████████████████████████
```

## To Create Flowchart:

### Mermaid Flowchart
```mermaid
sequenceDiagram
    participant F as Finnhub API
    participant P as Producer
    participant K as Kafka
    participant S as Spark
    participant C as Cassandra
    participant G as Grafana

    F->>P: WebSocket Trade
    P->>P: Validate & Enrich
    P->>K: Produce Message
    K->>S: Consume (5s batch)
    
    par Raw Trades
        S->>C: Write trades_v2
    and Aggregates
        S->>S: Calculate OHLCV
        S->>C: Write trade_aggregates
    end
    
    G->>C: Query Trades
    C-->>G: Return Results
    G->>G: Render Dashboard
    
    Note over P,S: Metrics exported to Prometheus
```

Save as `data-flow.mmd` and render with GitHub or mermaid CLI.